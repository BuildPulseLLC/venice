# GitHub Actions workflow for running compatibility tests: Avro and Pulsar Venice integration tests

name:  TestsDeCompatibilite

on: [push, pull_request, workflow_dispatch]

jobs:

  AvroCompatibilityTests:
    strategy:
      fail-fast: false
      matrix:
        jdk: [17]
    runs-on: bp-ubuntu-latest-x64-4x
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'temurin'
          cache: 'gradle'
      - shell: bash
        run: |
          git remote set-head origin --auto
          git remote add upstream https://github.com/linkedin/venice
          git fetch upstream
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          add-job-summary: never

      - name: Restore Gradle Build Cache
        uses: buildpulse/cache@v4
        with:
          path: /home/runner/.gradle
          key: ${{ runner.os }}-avro-gradle-${{ hashFiles('**/*.gradle*', '**/settings.gradle*', 'gradle.properties', 'gradle/wrapper/gradle-wrapper.properties', '**/gradle.lockfile') }}

      - name: Run Avro Compatibility Tests
        run: ./gradlew -DmaxParallelForks=2 --parallel :internal:venice-avro-compatibility-test:test --continue --build-cache
      - name: Package Build Artifacts
        if: success() || failure()
        shell: bash
        run: |
          mkdir ${{ github.job }}-artifacts
          find . -path "**/build/reports/*" -or -path "**/build/test-results/*" > artifacts.list
          rsync -R --files-from=artifacts.list . ${{ github.job }}-artifacts
          tar -zcvf ${{ github.job }}-jdk${{ matrix.jdk }}-logs.tar.gz ${{ github.job }}-artifacts
      - name: Upload Build Artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}
          path: ${{ github.job }}-jdk${{ matrix.jdk }}-logs.tar.gz
          retention-days: 30

  DuckVinciIntegrationTests:
    strategy:
      fail-fast: false
      matrix:
        jdk: [17]
    runs-on: bp-ubuntu-latest-x64-4x
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'temurin'
          cache: 'gradle'
      - shell: bash
        run: |
          git remote set-head origin --auto
          git remote add upstream https://github.com/linkedin/venice
          git fetch upstream
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          add-job-summary: never

      - name: Restore Gradle Build Cache
        uses: buildpulse/cache@v4
        with:
          path: /home/runner/.gradle
          key: ${{ runner.os }}-duck-gradle-${{ hashFiles('**/*.gradle*', '**/settings.gradle*', 'gradle.properties', 'gradle/wrapper/gradle-wrapper.properties', '**/gradle.lockfile') }}

      - name: Run DuckDB Integration Tests
        run: ./gradlew -DforkEvery=1 -DmaxParallelForks=1 :integrations:venice-duckdb:integrationTest --continue --build-cache
      - name: Package Build Artifacts
        if: success() || failure()
        shell: bash
        run: |
          mkdir ${{ github.job }}-artifacts
          find . -path "**/build/reports/*" -or -path "**/build/test-results/*" > artifacts.list
          rsync -R --files-from=artifacts.list . ${{ github.job }}-artifacts
          tar -zcvf ${{ github.job }}-jdk${{ matrix.jdk }}-logs.tar.gz ${{ github.job }}-artifacts
      - name: Upload Build Artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}
          path: ${{ github.job }}-jdk${{ matrix.jdk }}-logs.tar.gz
          retention-days: 30

  PulsarVeniceIntegrationTests:
    strategy:
      fail-fast: false
      matrix:
        jdk: [17]
    runs-on: bp-ubuntu-latest-x64-4x
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'temurin'
          cache: 'gradle'
      - shell: bash
        run: |
          git remote set-head origin --auto
          git remote add upstream https://github.com/linkedin/venice
          git fetch upstream
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          add-job-summary: never

      - name: Restore Gradle Build Cache
        uses: buildpulse/cache@v4
        with:
          path: /home/runner/.gradle
          key: ${{ runner.os }}-pulsar-gradle-${{ hashFiles('**/*.gradle*', '**/settings.gradle*', 'gradle.properties', 'gradle/wrapper/gradle-wrapper.properties', '**/gradle.lockfile') }}

      - name: Build with gradle
        run: ./gradlew assemble --continue --no-daemon -DforkEvery=1 -DmaxParallelForks=1 --build-cache

      - name: Setup Docker
        uses: buildpulse/setup-buildx-action@v3

      - name: Build docker images for Venice (latest-dev tag)
        shell: bash
        run: |
          cd ${{ github.workspace }}/docker
          ./build-venice-docker-images.sh
          cd ${{ github.workspace }}

      - name: Build docker images for Pulsar test (latest-dev tag)
        shell: bash
        run: |
          cd ${{ github.workspace }}/tests/docker-images/pulsar-sink
          docker buildx build --load --tag=pulsar/venice-test:latest-dev ${{ github.workspace }} --cache-from "type=registry,ref=${BP_DOCKER_REGISTRY}/pulsar/venice-test:build" --cache-to "type=registry,ref=${BP_DOCKER_REGISTRY}/pulsar/venice-test:build" -f ./Dockerfile
          cd ${{ github.workspace }}

      - name: Run the test
        shell: bash
        run: |
          ./gradlew :tests:venice-pulsar-test:pulsarIntegrationTest -i

      - name: Package Build Artifacts
        if: success() || failure()
        shell: bash
        run: |
          mkdir ${{ github.job }}-artifacts
          find . -path "**/build/reports/*" -or -path "**/build/test-results/*" > artifacts.list
          rsync -R --files-from=artifacts.list . ${{ github.job }}-artifacts
          tar -zcvf ${{ github.job }}-artifacts.tar.gz ${{ github.job }}-artifacts
      - name: Upload Build Artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}
          path: ${{ github.job }}-artifacts.tar.gz
          retention-days: 30

  CompatibilityTestsCompletionCheck:
    strategy:
      fail-fast: false
    runs-on: bp-ubuntu-latest-x64-4x
    needs: [AvroCompatibilityTests, DuckVinciIntegrationTests, PulsarVeniceIntegrationTests]
    timeout-minutes: 120
    steps:
      - name: AllIsWell
        shell: bash
        run: |
          echo "LGTM!"
