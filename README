#####################################################
######################### VENICE ####################
#####################################################

Welcome to Venice, the highly available data serving platform.

---------------------
Dependencies
---------------------
To use Venice, the following programs must be installed and running on your local machine:
- Apache Kafka Version 0.8.1
- Apache Zookeeper 3.4.6
- Apache Helix 0.7.1 ( Not sure actually, the client lib dependencies are 0.7.1 but don't know
whether controller or zookeeper node structures are different, but it works for sure with 0.7.1,
LinkedIn releases Helix 0.6.5 under the LinkedIn MP version 0.7.* madness for sure )

1) Start Apache Zookeeper on the local machine. The installation will have guides on how to do this.
2) Start Apache Kafka on the local machine. 
3) Start and use Venice.  Note: Start the Venice Controller, then start the Venice Server

-----------------------
Build
-----------------------
First, ensure that each project has been built. If not, please run: (from the project root directory)

To build and install ALL PROJECTS:
> ./gradlew buildAll

If the above does not work, you may resort to building each component seperately.

To build and install Venice client:
> ./gradlew :venice-client:clean venice-client:installApp

To build and install Venice server:
> ./gradlew :venice-server:clean :venice-server:installApp
----------------------
Quickstart
----------------------
There are two ways to use Venice. 

1) Venice is usable through its Java Client API.
2) Venice commands are also executable through a Shell Client, which is also provided.


To start the controller:
> export VENICE_STORE_INFO_DIR=`pwd`/venice-server/config/STORES
> ./venice-controller/quickstart/start-venice-controller.sh test-cluster localhost:2181 venice-controller

To start the server:

> export VENICE_CONFIG_DIR=`pwd`/venice-server/config
> venice-server/quickstart/start-venice-server.sh

To use the shell client:

> venice-client/quickstart/venice-client.sh [args]

-----------------------
Arguments
-----------------------

1) Commands
One of: ( --get, --put, --delete, --interactive ) must be present and specify the type of action to perform.

2) --key
The key to be given to Venice.

3) --value (only required for PUT)
The value to be specified with a PUT in Venice.

4) --store (optional)
The name of the store to use, note store name is the same as kafka topic name
If omitted, will use store name "test_shell_store"

Examples:

> run-client.sh --put --key test_key --value test_value
> run-client.sh --get --key test_key
> run-client.sh --delete --key test_key
> run-client.sh --interactive

-----------------------
Questions?
-----------------------
Venice Engineering Team - venice-eng@linkedin.com

